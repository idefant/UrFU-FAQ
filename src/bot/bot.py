from flask import Blueprint
from vk_api import vk_api
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from flask import request, json
from vk_api.utils import get_random_id

from search import get_answer

from config import vk_bot_token, vk_bot_confirmation_token

bot = Blueprint('bot', __name__)

token = vk_bot_token
confirmation_token = vk_bot_confirmation_token


@bot.route('/', methods=['POST'])
def processing():
    data = json.loads(request.data)
    if 'type' not in data.keys():
        return 'not vk'
    if data['type'] == 'confirmation':
        return confirmation_token
    elif data['type'] == 'message_new':
        vk_session = vk_api.VkApi(token=token)
        vk = vk_session.get_api()

        message_handler(data, vk)

        return 'ok'


def make_keyboard():
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button('–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('–°–æ—Ü.—Å–µ—Ç–∏ –£—Ä–§–£', color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    keyboard.add_button('–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è', color=VkKeyboardColor.POSITIVE)
    return keyboard.get_keyboard()


def message_handler(data, vk):

    user_message_text =data['object']['message']['text']

    if user_message_text == "–ù–∞—á–∞—Ç—å":
        bot_message_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —á–∞—Ç-–±–æ—Ç –£—Ä–∞–ª—å—Å–∫–æ–≥–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞,–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ " \
                           "–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—É–∑–µ.\n\n" \
                           "–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        send_message(data, vk, bot_message_text)

    elif user_message_text == "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã":
        bot_message_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å " \
                           "–Ω–∞–π—Ç–∏ –Ω–∞ (–≠–¢–û–ú –°–ê–ô–¢–ï)"
        send_message(data, vk, bot_message_text)

    elif user_message_text == "–°–æ—Ü.—Å–µ—Ç–∏ –£—Ä–§–£":
        bot_message_text = "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –£—Ä–§–£: urfu.ru \n\n" \
                           "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –£—Ä–§–£ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤: https://vk.com/abiturient_urfu \n\n" \
                           "–¢–∞–∫–∂–µ, —É –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö," \
                           "–≤–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö: \n" \
                           "üí° instagram.com/urfu.ru \n" \
                           "üí° t.me/urfu_ru \n" \
                           "üí° facebook.com/ural.federal.university \n" \
                           "üí° twitter.com/urfu \n" \
                           "üí° ok.ru/uralfederal \n" \
                           "üí° tiktok.com/@urfu.ru"
        send_message(data, vk, bot_message_text)

    elif user_message_text == "–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è":
        bot_message_text = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –£—Ä–§–£ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤: https://vk.com/abiturient_urfu \n" \
                           "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É" \
                           "–º–µ–¥–∏–∞-—à—Ç–∞—Ç–∞ –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. \n\n" \
                           "–ê–¥—Ä–µ—Å –£—Ä–§–£: —É–ª. –ú–∏—Ä–∞, 19, –ö–∏—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –í—Ç—É–∑–≥–æ—Ä–æ–¥–æ–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ \n\n" \
                           "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –£—Ä–§–£: https://urfu.ru/ru/applicant/contacts/ "
        send_message(data, vk, bot_message_text)

    else:
        result = get_answer(user_message_text)
        result_count = len(result)
        if result_count == 0:
            bot_message_text = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            send_message(data, vk, bot_message_text)
        else:
            send_message(data, vk, "–ù–∞–π–¥–µ–Ω–æ " + str(result_count) + " —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            for res in result:
                bot_message_text = str(res[0]) + " "
                bot_message_text += res[1].question
                send_message(data, vk, bot_message_text)


def send_message(data, vk, bot_message_text):
    user_id = data['object']['message']['from_id']

    vk.messages.send(access_token=token,
                     user_id=str(user_id),
                     message=bot_message_text,
                     random_id=get_random_id(),
                     keyboard=make_keyboard())
